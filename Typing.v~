Require Import List.
Require Import Unicode.Utf8_core.
Require Import SimpleNBE.Syntax.

Generalizable All Variables.

Inductive ctx_lookup : nat -> Typ -> Ctx -> Prop :=
  | here : `( 0 :  (T [ wk ] ∈! (T :: Γ))
  | there : `( n : T ∈! Γ -> (S n) : (T [ wk ]) ∈! (T' :: Γ))              
where "x : T ∈! Γ" := (ctx_lookup x T Γ).




Inductive wf_term : Ctx -> Exp -> Typ -> Prop :=
| vlookup : `(
                x : T ∈! Γ ->  
                Γ ⊢ v x : T)
| true_intro : `(Γ ⊢ true : Bool)
| false_intro : `(Γ ⊢ false : Bool)
| lam_intro : `(
                  M :: Γ ⊢ t : T ->
                  Γ ⊢ lam t : S -> T)
| lam_elim : `(
                 Γ ⊢ r : M --> T ->
                 Γ ⊢ m : M ->        
                 Γ ⊢ r $ s : T)
| term_sub : `(
                 Δ ⊢ t : T ->
                 Γ ⊢s σ : Δ ->
                 Γ ⊢ t [ σ ]
with wf_sub : Ctx -> Subst -> Ctx -> Prop :=
| sb_wk : `(M :: Γ ⊢s wk : Γ)
| sb_id : `(Γ ⊢s I : Γ)
| sb_comp : `(
              Γ ⊢s τ : Γ' ->
              Γ' ⊢s σ : Γ'' ->
               Γ ⊢s σ ∙ τ)
| sb_ext : `(
              Γ ⊢s σ : Δ ->
              Γ ⊢ m : M ->          
              Γ ⊢ σ ,, m : M :: Δ)        
.


Inductive wf_term_eq : Ctx -> Exp -> Exp -> Typ -> Prop :=
| var_eq : `(
               x : T ∈! Γ ->
               Γ ⊢ v x ≈ v x : T)    
| true_eq : `(Γ ⊢ true ≈ true : Bool)
| false_eq : `(Γ ⊢ false ≈ false : Bool)
| lam_cong : `(
               M :: Γ ⊢ t ≈ t' : T ->
               Γ ⊢ lam t ≈ lam t' : M --> T)
| app_cong : `(Γ ⊢ r ≈ r' : S --> T ->
               Γ ⊢ s ≈ s' : S ->             
               Γ ⊢ r $ s ≈ r' $ s' : T)
| sub_cong : `(
                 Γ ⊢s σ ≈ σ' : Δ ->
                 Δ ⊢ t ≈ t' : T ->
                 Γ ⊢ t [ σ ] ≈ t' [ σ' ] : T)             
| true_sub : `(Γ ⊢ true [ σ ] ≈ true : Bool) 
| false_sub : `(Γ ⊢ false [ σ ] ≈ false : Bool)
| app_sub : `(Γ ⊢s σ : Δ →
                 Δ ⊢ r : S ⟶ T →
                 Δ ⊢ s : S →
                 Γ ⊢ (r $ s) [ σ ] ≈ r [ σ ] $ s [ σ ] : T)
| lam_beta : `(S ∷ Γ ⊢ t : T →
                 Γ ⊢ s : S →
                 Γ ⊢ Λ t $ s ≈ t [ I , s ] : T)
| lam_eta : `(Γ ⊢ t : S ⟶ T →
              Γ ⊢ t ≈ Λ (t [ ↑ ] $ v 0) : S ⟶ T)
| sub_id : `(Γ ⊢ t : T →
             Γ ⊢ t [ I ] ≈ t : T)
| wk_lookup : `(x : T ∈! Γ →
                S ∷ Γ ⊢ v x [ wk ] ≈ v (suc x) : T)
| sub_comp : `(Γ ⊢s τ : Γ′ →
                 Γ′ ⊢s σ : Γ″ →
                 Γ″ ⊢ t : T →
                 Γ ⊢ t [ σ ∘ τ ] ≈ t [ σ ] [ τ ] : T)
| ext_var_z : `(Γ ⊢s σ : Δ →
                 Γ ⊢ s : S →
                 Γ ⊢ v 0 [ σ , s ] ≈ s : S)
| ext_var_s : `(Γ ⊢s σ : Δ →
                 Γ ⊢ s : S →
                 x : T ∈! Δ →
                 Γ ⊢ v (suc x) [ σ , s ] ≈ v x [ σ ] : T)
| eq_sym : `(Γ ⊢ t ≈ t' : T -> Γ ⊢ t' ≈ t : T)
| eq_trans : `(Γ ⊢ t ≈ t′ : T →
                 Γ ⊢ t′ ≈ t″ : T →
                 Γ ⊢ t ≈ t″ : T)
with wf_sub_eq : Ctx -> Subst -> Subst -> Ctx -> Prop :=
| eq_wk : `(M :: Γ ⊢s wk ≈ wk : Γ)
| eq_id : `(Γ ⊢s id ≈ id : Γ)
| eq_comp_cong : `(Γ ⊢s τ ≈ τ′ : Γ′ →
                  Γ′ ⊢s σ ≈ σ′ : Γ″ →
                  Γ ⊢s σ ∘ τ ≈ σ′ ∘ τ′ : Γ″)

| eq_ext_cong : `(Γ ⊢s σ ≈ σ′ : Δ →
                  Γ ⊢ s ≈ s′ : S →
                  Γ ⊢s σ , s ≈ σ′ , s′ : S ∷ Δ)

| eq_wk_ext : `( Γ ⊢s σ : Δ →
                  Γ ⊢s : S →
                  Γ ⊢s ↑ ∘ (σ , s) ≈ σ : Δ)

| eq_id_comp_l : `(Γ ⊢s σ : Δ →
                  Γ ⊢s I ∘ σ ≈ σ : Δ)

| eq_id_comp_r : `(Γ ⊢s σ : Δ →
                  Γ ⊢s σ ∘ I ≈ σ : Δ)

| eq_comp_assoc : `(Γ′ ⊢s σ : Γ →
                  Γ″  ⊢s σ′ : Γ′ →
                  Γ‴  ⊢s σ″ : Γ″ →
                  Γ‴ ⊢s σ ∘ σ′ ∘ σ″ ≈ σ ∘ (σ′ ∘ σ″) : Γ)

| eq_ext_var : `(Γ ⊢s σ : S ∷ Δ →
                  Γ ⊢s σ ≈ (↑ ∘ σ) , v 0 [ σ ] : S ∷ Δ)

| eq_sym : `(Γ ⊢s σ ≈ σ′ : Δ →
             Γ ⊢s σ′ ≈ σ : Δ)

| eq_trans : `(
                 Γ ⊢s σ ≈ σ′ : Δ →
                 Γ ⊢s σ′ ≈ σ″ : Δ →
                 Γ ⊢s σ ≈ σ″ : Δ)




                              
